"""Shows the use of alternative compiler binaries.
"""

load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@npm//examples:ttypescript/package_json.bzl", ttsc_bin = "bin")

write_file(
    name = "bigts",
    out = "big.ts",
    content = [
        "export const a{0}: number = {0}".format(x)
        for x in range(10000)
    ],
)

# The default value for ts_project#tsc is @npm_typescript//:tsc
# We can inspect that using
# $ bazel query --output=build @npm_typescript//:tsc
# and see something like
# js_binary(
#   name = "tsc",
#   data = ["@npm_typescript//:node_modules/typescript"],
#   entry_point = "@npm_typescript//:tsc_entrypoint",
# )
#
# So if we need to pass arguments to Node, we just need to make our own modified version of that.
js_binary(
    name = "tsc_with_more_heap",
    data = ["@npm_typescript//:node_modules/typescript"],
    entry_point = "@npm_typescript//:tsc_entrypoint",
    node_options = ["--max-old-space-size=8192"],
)

ts_project(
    name = "big",
    srcs = ["big.ts"],
    tsc = ":tsc_with_more_heap",
)

# The ngc compiler from Angular: https://angular.io/guide/aot-compiler
ttsc_bin.ttsc_binary(
    name = "ttsc",
)

ts_project(
    name = "ttsc_bug",
    srcs = [
        "component.ts",
    ],
    # Tell ts_project to run ngc. The compiler has to have a matching CLI as `tsc` for this to work.
    tsc = ":ttsc",
    deps = [
        "//examples:node_modules/@types/node",
        "//examples:node_modules/@angular/core",
        "//:node_modules/typescript",
    ],
)

build_test(
    name = "test",
    targets = [
        ":ttsc",
        ":big",
    ],
)
